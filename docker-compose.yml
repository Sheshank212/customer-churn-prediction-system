# Docker Compose for Customer Churn Prediction System
# Complete development and monitoring stack

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: churn-postgres
    environment:
      POSTGRES_DB: churn_prediction
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - churn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Customer Churn Prediction API
  churn-api:
    build: .
    container_name: churn-prediction-api
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=churn_prediction
      - DB_USER=postgres
      - DB_PASSWORD=password
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - churn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: churn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - churn-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: churn-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - churn-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: churn-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - churn-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: churn-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - churn-network

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: churn-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@postgres:5432/churn_prediction?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - churn-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: churn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - churn-network

  # Jupyter Notebook for development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: churn-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - JUPYTER_ENABLE_LAB=yes
    depends_on:
      - postgres
    networks:
      - churn-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  churn-network:
    driver: bridge